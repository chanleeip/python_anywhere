'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var path = _interopDefault(require('path'));
var fs = _interopDefault(require('fs'));

/*
 * Copyright 2020 American Express Travel Related Services Company, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
var indentLine = function indentLine(obj, indent) {
  return JSON.stringify(obj, null, indent);
};

/*
 * Copyright 2020 American Express Travel Related Services Company, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

var writeToFile = function writeToFile(outPath, input, outputType) {
  var fileOutPath = outPath; // Case: "SplitFile": Export input object key, values as exports to separate file

  if (outputType === 'splitFile') {
    // Create dir for generated split files
    if (path.extname(fileOutPath)) {
      fileOutPath = fileOutPath.slice(0, -3);
    } else {
      fileOutPath = path.join(fileOutPath, input.filename);
    }

    if (!fs.existsSync(fileOutPath)) {
      fs.mkdirSync(fileOutPath);
    }

    Object.entries(input.contents).forEach(function (key) {
      var body = indentLine(key[1], 2);
      fs.writeFileSync(path.join(fileOutPath, "".concat(key[0], ".js")), 'export default ');
      fs.appendFileSync(path.join(fileOutPath, "".concat(key[0], ".js")), body);
    });
  } else {
    // Create file for generated shake or simple file
    if (!path.extname(fileOutPath)) {
      fileOutPath = path.join(fileOutPath, "".concat(input.filename, ".js"));
    }

    if (outputType === 'shakeFile') {
      // Case: "ShakeFile": Export input object key, values as exports to file
      fs.writeFileSync(fileOutPath, '');
      Object.entries(input.contents).forEach(function (key) {
        fs.appendFileSync(fileOutPath, "export const ".concat(key[0], " =  ").concat(JSON.stringify(key[1]), ";\n"));
      });
    } else {
      // Case: "File": Export input object to file
      var body = indentLine(input.contents, 2);
      fs.writeFileSync(fileOutPath, 'export default ');
      fs.appendFileSync(fileOutPath, body);
    }
  }
};

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

/*
 * Copyright 2020 American Express Travel Related Services Company, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
var addProperty = function addProperty(obj, key, value) {
  var retObj = obj;

  if (retObj[key]) {
    retObj[key] = _objectSpread2({}, retObj[key], {}, value);
  } else {
    retObj[key] = value;
  }

  return retObj;
};

/*
 * Copyright 2020 American Express Travel Related Services Company, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
var camelize = function camelize(str) {
  return str.replace(/-([a-z])/g, function (g) {
    return g[1].toUpperCase();
  });
};

/*
 * Copyright 2020 American Express Travel Related Services Company, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
var capitalize = function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
};

/*
 * Copyright 2020 American Express Travel Related Services Company, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
var sanitize = function sanitize(name) {
  return name.replace(/\*/g, 'all-children').replace(/#/g, '$').replace(/\s\s+/g, ' ').replace(/[^a-zA-Z0-9$]/g, '_').replace(/^_+/g, '').replace(/_+$/g, '');
};

/*
 * Copyright 2020 American Express Travel Related Services Company, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

var fontface = function fontface(rule, result) {
  var name = '';
  var obj = {};
  var fontObj = {};
  rule.declarations.forEach(function (declaration) {
    var cssProperty = camelize(declaration.property);
    fontObj[cssProperty] = declaration.value;
    name = capitalize(camelize(fontObj.fontFamily).replace(/"/g, ''));
    obj = {
      '@font-face': fontObj
    };
  });
  var dupeFlag = false;
  Object.keys(result).forEach(function (key) {
    if (key.split('_')[0] === name) {
      if (JSON.stringify(result[key]) === JSON.stringify(obj)) {
        dupeFlag = true;
      }
    }
  });

  if (!dupeFlag) {
    var numVar = Object.entries(result).filter(function (resObj) {
      return resObj[0].split('_')[0] === name;
    }).length;

    if (numVar > 0) {
      name = "".concat(name, "_").concat(numVar + 1);
    }

    name = sanitize(name);
    return [name, obj];
  }

  return false;
};

var keyframes = function keyframes(rule) {
  var keyFrameObj = {};
  rule.keyframes.forEach(function (keyframe) {
    keyframe.declarations.forEach(function (decl) {
      keyFrameObj[keyframe.values[0]] = _objectSpread2({}, keyFrameObj[keyframe.values[0]], _defineProperty({}, decl.property, decl.value));
    });
  });
  var name = camelize("keyframes-".concat(rule.name));
  var obj = {};
  obj["@keyframes ".concat(rule.name)] = keyFrameObj;
  name = sanitize(name);
  return [name, obj];
};

/*
 * Copyright 2020 American Express Travel Related Services Company, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

var standard = function standard(rule, result) {
  var obj = {};
  var retObj = {};
  rule.declarations.forEach(function (declaration) {
    var cssProperty = camelize(declaration.property);
    obj[cssProperty] = declaration.value;
  });
  rule.selectors.forEach(function (selector) {
    var name; // Check if selector contains a pseudo selector

    var pseudoSelectorIndex = selector.indexOf(':');

    if (pseudoSelectorIndex !== -1) {
      // Find end of pseudo selector
      var endPseudoSelectorIndex = selector.indexOf(' ', pseudoSelectorIndex);
      if (endPseudoSelectorIndex === -1) endPseudoSelectorIndex = selector.length; // Split selector

      var primarySelector = selector.slice(0, pseudoSelectorIndex);
      var pseudoSelector = selector.slice(pseudoSelectorIndex, endPseudoSelectorIndex);
      var secondarySelector = selector.slice(endPseudoSelectorIndex, selector.length);
      var pseudoObj = {};
      pseudoObj["&".concat(pseudoSelector).concat(secondarySelector)] = obj;
      name = sanitize(primarySelector.trim());
      retObj = addProperty(result, name, pseudoObj);
    } else {
      name = sanitize(selector.trim());
      retObj = addProperty(result, name, obj);
    }
  });
  return retObj;
};

var css = require('css');

var convertRules = function convertRules(rules) {
  var res = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var result = res;
  rules.forEach(function (rule) {
    if (rule.type === 'media') {
      // Convert @media rules
      var name = "@media ".concat(rule.media);
      result[name] = result[name] || {};
      var media = result[name];
      convertRules(rule.rules, media);
    } else if (rule.type === 'font-face') {
      // Convert @font-face rules
      var fontProp = fontface(rule, result);
      if (fontProp) result = addProperty(result, fontProp[0], fontProp[1]);
    } else if (rule.type === 'keyframes') {
      // Convert @keyframes rules
      var keyProp = keyframes(rule);
      result = addProperty(result, keyProp[0], keyProp[1]);
    } else if (rule.type === 'rule') {
      // Convert standard CSS rules
      var standardProp = standard(rule, result);
      Object.entries(standardProp).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        result = addProperty(result, key, value);
      });
    }
  });
  return result;
};

var convertToJS = function convertToJS(input) {
  // Parse CSS string into rules array
  try {
    var parsedCss = css.parse(input);
    var rules = parsedCss.stylesheet.rules;
    return convertRules(rules);
  } catch (err) {
    throw new Error("Invalid CSS input: ".concat(err));
  }
};

/*
 * Copyright 2020 American Express Travel Related Services Company, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
var reverseMediaQueries = function reverseMediaQueries(inputData) {
  var exportObject = {};

  var moveMediaInsideClass = function moveMediaInsideClass(object) {
    var media = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    Object.entries(object).forEach(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          key = _ref2[0],
          value = _ref2[1];

      if (key.includes('@media')) {
        moveMediaInsideClass(object[key], key);
      } else if (media) {
        var tempObj = {};
        tempObj[media] = value;

        if (exportObject[key]) {
          exportObject[key] = _objectSpread2({}, exportObject[key], {}, tempObj);
        } else {
          exportObject[key] = tempObj;
        }
      } else if (exportObject[key]) {
        exportObject[key] = _objectSpread2({}, exportObject[key], {}, value);
      } else {
        exportObject[key] = value;
      }
    });
  };

  moveMediaInsideClass(inputData);
  return exportObject;
};

/*
 * Copyright 2020 American Express Travel Related Services Company, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
var convertStringToJson = function convertStringToJson(input, mediaReverse) {
  var contents = convertToJS(input);

  if (mediaReverse) {
    contents = reverseMediaQueries(contents);
  }

  return {
    contents: contents
  };
};
var convertFileToJson = function convertFileToJson(inputFile, mediaReverse) {
  var css = fs.readFileSync(inputFile, 'utf8');
  var contents = convertToJS(css);

  if (mediaReverse) {
    contents = reverseMediaQueries(contents);
  }

  var filename = path.basename(inputFile, '.css');
  return {
    contents: contents,
    filename: filename
  };
};
var convertDirToJson = function convertDirToJson(inputLocation, mediaReverse) {
  var files = fs.readdirSync(inputLocation);
  return files.filter(function (file) {
    if (fs.statSync(path.join(inputLocation, file)).isDirectory()) {
      console.warn("Nested directories not supported, skipping ".concat(file));
      return false;
    }

    return true;
  }).map(function (file) {
    return convertFileToJson(path.join(inputLocation, file), mediaReverse);
  });
};

/*
 * Copyright 2020 American Express Travel Related Services Company, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

var convert = function convert(input) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var outputType = config.outputType;
  var outputPath = config.outputPath;
  var mediaReverse = config.mediaReverse;
  var convertedCss;

  if (outputType === 'splitFile' || outputType === 'shakeFile') {
    mediaReverse = true;
  } //If input is a String of CSS


  if (input === path.basename(input)) {
    convertedCss = convertStringToJson(input, mediaReverse);
  } else {
    //If input fs path is a Directory
    if (fs.statSync(input).isDirectory()) {
      convertedCss = convertDirToJson(input, mediaReverse);
    } else {
      //If input fs path is a File
      convertedCss = convertFileToJson(input, mediaReverse);
    }
  }

  if (!outputType) {
    if (Array.isArray(convertedCss)) {
      return convertedCss.map(function (obj) {
        return obj.contents;
      });
    } else {
      return convertedCss.contents;
    }
  } else {
    var writeRecur = function writeRecur(input) {
      if (Array.isArray(input)) {
        input.forEach(function (obj) {
          writeRecur(obj);
        });
      } else {
        return writeToFile(outputPath, input, outputType);
      }
    };

    writeRecur(convertedCss);
  }
};

exports.convert = convert;
